package org.curransoft.ash;

/**
 * An atomic action represents an atomic modification to the application state
 * model. This is the base class for all atomic actions: create, uncreate,
 * delete, undelete, and set.
 * 
 * @author curran
 * 
 */
public abstract class AtomicAction {
	/**
	 * Parses an atomic action encoding into an AtomicAction (subclass) object.
	 * The encoding is expected to be originally generated by the toString()
	 * method of an atomic action.
	 * 
	 * The encoding is defined as follows:
	 * 
	 * For create actions: "c " + id + " " + type
	 * 
	 * For uncreate actions: "uc " + id
	 * 
	 * For delete actions: "d " + id
	 * 
	 * For undelete actions: "ud " + id
	 * 
	 * For set actions: "s " + id + " " + property + " " + value
	 * 
	 * For unset actions: "us " + id + " " + property + " " + value
	 * 
	 * For unset actions with null values: "us " + id + " " + property
	 * 
	 * 
	 */
	public static AtomicAction fromString(String actionString) {
		if (actionString == null || actionString.length() == 0)
			throw new InvalidAtomicActionStringException(actionString);
		else {
			try {
				String[] tokens = actionString.split(" ");
				if (tokens.length == 3) {
					if (tokens[0].equals("c"))
						return new AtomicActionCreate(tokens[2],
								Integer.parseInt(tokens[1]));
					else if (tokens[0].equals("us"))
						return new AtomicActionUnset(
								Integer.parseInt(tokens[1]), tokens[2], null);
					else
						throw new InvalidAtomicActionStringException(
								actionString);
				} else if (tokens.length == 2) {
					if (tokens[0].equals("d"))
						return new AtomicActionDelete(
								Integer.parseInt(tokens[1]));
					else if (tokens[0].equals("uc"))
						return new AtomicActionUncreate(
								Integer.parseInt(tokens[1]));
					else if (tokens[0].equals("ud"))
						return new AtomicActionUndelete(
								Integer.parseInt(tokens[1]));
					else
						throw new InvalidAtomicActionStringException(
								actionString);
				} else if (tokens.length == 4) {
					if (tokens[0].equals("s"))
						return new AtomicActionSet(Integer.parseInt(tokens[1]),
								tokens[2], tokens[3]);
					else if (tokens[0].equals("us"))
						return new AtomicActionUnset(
								Integer.parseInt(tokens[1]), tokens[2],
								tokens[3]);
					else
						throw new InvalidAtomicActionStringException(
								actionString);
				} else
					throw new InvalidAtomicActionStringException(actionString);
			} catch (NumberFormatException e) {
				throw new InvalidAtomicActionStringException(actionString);
			}
		}
	}

	public abstract int hashCode();

	public abstract boolean equals(Object obj);
}
