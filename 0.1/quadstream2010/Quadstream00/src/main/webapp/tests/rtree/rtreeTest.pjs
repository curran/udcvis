int rectSize = 10;
var selectionRect;
var tempSelectionRect = new Rectangle(0,0,0,0);
var rtree = new RTree();
int maxRTreeDepth = 1;
var rects = [];
int SHIFT = 48;
int CTRL = 49;
int ALT = 50;
boolean ctrlPressed = false;

void setup(){
	noLoop();
	
	for(int i=0;i<20;i++){
		int x = random(width-rectSize);
		int y = random(width-rectSize);
		var r = new Rectangle(x,y,x+rectSize,y+rectSize);
		rects.push(r);
		rtree.insert(r);
	}
}
void draw(){
	background( 240 );
	fill(0,0,200);
	for(var i = 0;i<rects.length;i++)
		drawRect(rects[i]);

	noFill();
	stroke(150);
	if(rtree.root != null)
		drawRTreeNodes(rtree.root,rtree.root,0);

	if(selectionRect){
		tempSelectionRect.set(selectionRect);
		tempSelectionRect.ensurePositiveArea();
		
		stroke(255,0,0);
		if(rtree.root != null)
			drawRTreeNodes(tempSelectionRect,rtree.root,0);

		stroke(0);
		strokeWeight(1);
		drawRect(tempSelectionRect);
		
		fill(0,200,0);
		rtree.forEachSearch(tempSelectionRect, drawRect);
	}
}

void drawRTreeNodes(r,n,level){
	if(level > maxRTreeDepth)
		maxRTreeDepth = level;
	for (i in n.entries) {
		var c = n.entries[i];
		if (c.intersects(r) && !n.isLeaf){
			strokeWeight(maxRTreeDepth-level);
			drawRect(c);
			drawRTreeNodes(r,c,level+1);
		}
	}
}

void drawRect(var r){
	rect(r.x1, r.y1, r.x2 - r.x1, r.y2 - r.y1 );
}
void mousePressed(){
	selectionRect = new Rectangle(mouseX, mouseY, mouseX, mouseY);
}
void mouseDragged(){
	if(ctrlPressed){
		selectionRect.x1 = mouseX - (selectionRect.x2 - selectionRect.x1);
		selectionRect.y1 = mouseY - (selectionRect.y2 - selectionRect.y1);
	}
	selectionRect.x2 = mouseX;
	selectionRect.y2 = mouseY;
	redraw();
}
void mouseReleased(){
	selectionRect = undefined;
	redraw();
}
void mouseClicked(){
	var r = new Rectangle(mouseX, mouseY,mouseX+rectSize, mouseY+rectSize);
	rects.push(r);
	rtree.insert(r);
	redraw();
}
void keyPressed() { ctrlPressed = key == CTRL;}
void keyReleased() { ctrlPressed = false;}